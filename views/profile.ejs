<% include partials/header %>

<link rel="stylesheet" type="text/css" href="/stylesheets/profile.css">
<link rel="stylesheet" type="text/css" href="/libraries/flag-icon-css-master/css/flag-icon.min.css">


<script src="https://cdnjs.cloudflare.com/ajax/libs/1000hz-bootstrap-validator/0.11.9/validator.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.min.js"></script>


<%
    const sec = 1000;
    const min = sec * 60;
    const hour = min * 60;
    const day = hour * 24;
    const month = day * 30;
    const year = month * 12;


    var getDatesString = function (time) {

        var varTime = time;

        var str = "";

        if(Math.floor(varTime/year) !== 0){
            str += Math.floor(varTime/year) + " yrs, ";
            varTime = varTime - Math.floor(varTime/year)*year;
        }
        if(Math.floor(varTime/month) !== 0){
            str += Math.floor(varTime/month) + " mths, ";
            varTime = varTime - Math.floor(varTime/month)*month;
        }
        if(Math.floor(varTime/day) !== 0){
            str += Math.floor(varTime/day) + " days, ";
            varTime = varTime - Math.floor(varTime/day)*day;
        }
        if(Math.floor(varTime/hour) !== 0){
            str += Math.floor(varTime/hour) + " hrs, ";
            varTime = varTime - Math.floor(varTime/hour)*hour;
        }
        if(Math.floor(varTime/min) !== 0){
            str += Math.floor(varTime/min) + " mins, ";
            varTime = varTime - Math.floor(varTime/min)*min;
        }
        if(Math.floor(varTime/sec) !== 0){
            str += Math.floor(varTime/sec) + " secs. ";
            varTime = varTime - Math.floor(varTime/sec)*sec;
        }

        return str;
    }

%>


<div class="container myContainer">

    <% if(userData && userData.username){ %>
        <div class="row">
            <div class="col-xs-12" id="topRow">

                <div class="row">
                    <div class="col-xs-6 col-md-3 avatarImgDiv">
                
                        <% if(userData.avatarImgRes){ %>
                            <% if(userData.avatarImgRes.includes("http")){ %>
                                <img class="avatarImg" src=<%= userData.avatarImgRes %>>
                            <% } else {%>
                                <img class="avatarImg" src=<%= "../avatars/" + userData.avatarImgRes %> >
                            <% } %>
                        <% } else{ %>
                            <img class="avatarImg" src="../avatars/base-res.png  " >
                        <% } %>

                        <div class="middle">
                            <div class="changeAvatarText">Change avatar</div>
                        </div>

                    </div>
                    <div class="col-xs-6 col-md-9">
                        <span id="title">
                            <h2>
                                <span id="flagSpan" class="flag-icon flag-icon-au" data-toggle="tooltip" title="Australia"></span>
                                <span id="profileUsername"><%=userData.username %> </span>
                            </h2>  
                            <span> Date joined: <%= userData.dateJoined.toDateString() %> </span>
                        </span>
                        
                    </div>
                    
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12">
                <p class="biography">
                    <%=userData.biography %>
                </p>
            </div>
        </div>
        

        <div class="row">
            <div class="col-xs-12 col-md-4">
                <h2><u>Stats:</u></h2>  

                <table class="table myTable">
                    <tbody>
                        <tr>
                            <td class="statsCol1">Total games played: </td>
                            <td class="statsCol2"> <%= userData.totalGamesPlayed %> </td>
                        </tr>
                        <tr>
                            <td class="statsCol1">Total games won: </td>
                            <td class="statsCol2"> <%= userData.totalWins %> </td>
                        </tr>
                        <tr>
                            <td class="statsCol1">Total games lost: </td>
                            <td class="statsCol2"> <%= userData.totalLosses %> </td>
                        </tr>
                        <tr>
                            <td class="statsCol1">Total time played: </td>
                            <!--<td class="statsCol2"> <%=getDatesString(userData.totalTimePlayed)%> </td>-->
                            <td class="statsCol2"> <%=Math.floor(userData.totalTimePlayed/(1000*60*60))%> hrs</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <div class="col-xs-12 col-md-8">
                <canvas id="statsChart">
                </canvas>
            </div>
            
        </div>

    <% } else { %>

            <h1>User not found. Please check the spelling and capital letters.</h1>

    <% } %>

</div>

<br>
<br>
<br>
<br>
<br>
<br>
<br>






<% if(userData && userData.username){ %>

<script>
    var userData;

    $( document ).ready(function() {
        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });


        xmlhttp = new XMLHttpRequest();
        xmlhttp.open("GET","/profile/getProfileDataAJAX/" + $("#profileUsername")[0].innerHTML, true);

        console.log("/profile/getProfileDataAJAX/" + $("#profileUsername")[0].innerHTML);


        xmlhttp.onreadystatechange=function(){
            if (xmlhttp.readyState==4 && xmlhttp.status==200){
                userData=JSON.parse(xmlhttp.responseText);
                console.log(userData);

                drawCharts();
            }
        }
        xmlhttp.send();
    });


    function drawCharts() {

        const allianceOfRole = {
            "Merlin": "Resistance",
            "Percival": "Resistance",
            "Assassin": "Spy",
            "Morgana": "Spy",
            "Mordred": "Spy",
            "Oberon": "Spy",
            "Resistance": "Resistance",
            "Spy": "Spy"
        }



        var blue1 = 'rgba(54, 162, 235, 0.3)';
        var blue2 = 'rgba(54, 162, 235, 0.5)';
        var blueBorder = 'rgba(54, 162, 235, 1)';

        var red1 = 'rgba(255, 99, 132, 0.3)';
        var red2 = 'rgba(255, 99, 132, 0.5)';
        var redBorder = 'rgba(255, 99, 132, 1)';

        var roleStats = userData.roleStats;
        //collect the total wins and losses of each role and of each game size played
        var generalRoleStats = {};
        for(var gameSize in roleStats){
            if(roleStats.hasOwnProperty(gameSize)){

                for(var role in roleStats[gameSize]){
                    if(roleStats[gameSize].hasOwnProperty(role)){
                        if(!generalRoleStats[role]){
                            generalRoleStats[role] = roleStats[gameSize][role];
                        }
                        else{
                            generalRoleStats[role].wins += roleStats[gameSize][role].wins;
                            generalRoleStats[role].losses += roleStats[gameSize][role].losses;
                        }
                    }
                }
            }
        }

        console.log(generalRoleStats);

        var generalLabelsArray = ["Overall Resistance", "Overall Spy"];


        var spyWins = userData.totalWins - userData.totalResWins;
        var spyLosses = userData.totalLosses - userData.totalResLosses;

        var generalData = [Math.floor(userData.totalResWins/ (userData.totalResWins+userData.totalResLosses) * 100), Math.floor((spyWins) / (spyLosses + spyWins) * 100)];
        var backgroundColor = [blue1, red1];
        var borderColor = [blueBorder, redBorder];

        for(var role in generalRoleStats){
            if(generalRoleStats.hasOwnProperty(role)){

                // console.log(role);

                console.log(generalRoleStats[role].wins);

                var percentWon = Math.floor((generalRoleStats[role].wins / (generalRoleStats[role].wins + generalRoleStats[role].losses)) * 100);
                generalData.push(percentWon);

                console.log(generalData);



                //Now capitalise
                var role = capitalizeFirstLetter(role);
                generalLabelsArray.push(role);
                console.log(generalLabelsArray);
                

                
                if(allianceOfRole[role] === "Resistance"){
                    backgroundColor.push(blue1);
                    borderColor.push(blueBorder);  
                }
                else{
                    borderColor.push(redBorder);
                    backgroundColor.push(red1);  
                }
            }
        }
        
        
        var dataGeneral = {
            labels: generalLabelsArray,
            datasets: [{
                label: 'Winrate %',
                data: generalData,
                backgroundColor: backgroundColor,
                borderColor: borderColor,
                borderWidth: 1
            }],
        }
        var optionsGeneral = {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero:true
                    }
                }],
                xAxes: [{
                    ticks: {
                        suggestedMin: 0,
                        suggestedMax: 100
                    }
                }]
            }
        }





        var dataSample = {
            labels: ["Resistance", "Spy", "Merlin", "Percival", "Assassin", "Morgana"],
            datasets: [{
                label: 'Winrate %',
                data: [54, 67, 45, 70, 45, 30],
                backgroundColor: [
                    blue1,
                    blue2,
                    red1,
                    red2,
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: [
                    blueBorder,
                    blueBorder,
                    redBorder,
                    redBorder,
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }],
        }
        var optionsGeneral = {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero:true
                    }
                }],
                xAxes: [{
                    ticks: {
                        suggestedMin: 0,
                        suggestedMax: 100
                    }
                }]
            }
        }






        var ctx = document.getElementById("statsChart");
        var myChart = new Chart(ctx, {
            type: 'horizontalBar',
            data: dataGeneral,
            options: optionsGeneral
        });
    }


function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}


</script>
<% } %>









<% include partials/footer %>





